Command Line Options#
Node.js comes with a variety of CLI options. These options expose built-in debugging, multiple ways to execute scripts, and other helpful runtime options.

To view this documentation as a manual page in a terminal, run man node.

Synopsis#
node [options] [V8 options] [script.js | -e "script" | -] [--] [arguments]

node inspect [script.js | -e "script" | <host>:<port>] …

node --v8-options

Execute without arguments to start the REPL.

For more info about node inspect, please see the debugger documentation.

Options#
History
All options, including V8 options, allow words to be separated by both dashes (-) or underscores (_).

For example, --pending-deprecation is equivalent to --pending_deprecation.

-#
Added in: v8.0.0
Alias for stdin, analogous to the use of - in other command line utilities, meaning that the script will be read from stdin, and the rest of the options are passed to that script.

--#
Added in: v6.11.0
Indicate the end of node options. Pass the rest of the arguments to the script. If no script filename or eval/print script is supplied prior to this, then the next argument will be used as a script filename.

--abort-on-uncaught-exception#
Added in: v0.10
Aborting instead of exiting causes a core file to be generated for post-mortem analysis using a debugger (such as lldb, gdb, and mdb).

If this flag is passed, the behavior can still be set to not abort through process.setUncaughtExceptionCaptureCallback() (and through usage of the domain module that uses it).

--completion-bash#
Added in: v10.12.0
Print source-able bash completion script for Node.js.

$ node --completion-bash > node_bash_completion
$ source node_bash_completion
--cpu-prof#
Added in: v12.0.0
Stability: 1 - Experimental
Starts the V8 CPU profiler on start up, and writes the CPU profile to disk before exit.

If --cpu-prof-dir is not specified, the generated profile will be placed in the current working directory.

If --cpu-prof-name is not specified, the generated profile will be named CPU.${yyyymmdd}.${hhmmss}.${pid}.${tid}.${seq}.cpuprofile.

$ node --cpu-prof index.js
$ ls *.cpuprofile
CPU.20190409.202950.15293.0.0.cpuprofile
--cpu-prof-dir#
Added in: v12.0.0
Stability: 1 - Experimental
Specify the directory where the CPU profiles generated by --cpu-prof will be placed.

--cpu-prof-name#
Added in: v12.0.0
Stability: 1 - Experimental
Specify the file name of the CPU profile generated by --cpu-prof.

--enable-fips#
Added in: v6.0.0
Enable FIPS-compliant crypto at startup. (Requires Node.js to be built with ./configure --openssl-fips.)

--es-module-specifier-resolution=mode#
Added in: v12.0.0
To be used in conjunction with --experimental-modules. Sets the resolution algorithm for resolving specifiers. Valid options are explicit and node.

The default is explicit, which requires providing the full path to a module. The node mode will enable support for optional file extensions and the ability to import a directory that has an index file.

Please see customizing esm specifier resolution for example usage.

--experimental-json-modules#
Added in: v12.0.0
Enable experimental JSON support for the ES Module loader.

--experimental-modules#
Added in: v8.5.0
Enable experimental ES module support and caching modules.

--experimental-policy#
Added in: v11.8.0
Use the specified file as a security policy.

--experimental-repl-await#
Added in: v10.0.0
Enable experimental top-level await keyword support in REPL.

--experimental-report#
Added in: v11.8.0
Enable experimental diagnostic report feature.

--experimental-vm-modules#
Added in: v9.6.0
Enable experimental ES Module support in the vm module.

--force-fips#
Added in: v6.0.0
Force FIPS-compliant crypto on startup. (Cannot be disabled from script code.) (Same requirements as --enable-fips.)

--frozen-intrinsics#
Added in: v11.12.0
Stability: 1 - Experimental
Enable experimental frozen intrinsics like Array and Object.

Support is currently only provided for the root context and no guarantees are currently provided that global.Array is indeed the default intrinsic reference.

Code breakage is highly likely with this flag, especially since limited support for subclassing builtins is provided currently due to ECMA-262 bug https://github.com/tc39/ecma262/pull/1320.

Both of the above may change in future updates, which will be breaking changes.

--heapsnapshot-signal=signal#
Added in: v12.0.0
Generates a heap snapshot each time the process receives the specified signal. signal must be a valid signal name. Disabled by default.

--http-parser=library#
Added in: v11.4.0
Chooses an HTTP parser library. Available values are:

llhttp for https://llhttp.org/
legacy for https://github.com/nodejs/http-parser
The default is llhttp, unless otherwise specified when building Node.js.

This flag exists to aid in experimentation with the internal implementation of the Node.js http parser. This flag is likely to become a no-op and removed at some point in the future.

--icu-data-dir=file#
Added in: v0.11.15
Specify ICU data load path. (Overrides NODE_ICU_DATA.)

--input-type=type#
Added in: v12.0.0
Used with --experimental-modules, this configures Node.js to interpret string input as CommonJS or as an ES module. String input is input via --eval, --print, or STDIN.

Valid values are "commonjs" and "module". The default is "commonjs".

--inspect-brk[=[host:]port]#
Added in: v7.6.0
Activate inspector on host:port and break at start of user script. Default host:port is 127.0.0.1:9229.

--inspect-port=[host:]port#
Added in: v7.6.0
Set the host:port to be used when the inspector is activated. Useful when activating the inspector by sending the SIGUSR1 signal.

Default host is 127.0.0.1.

See the security warning below regarding the host parameter usage.

--inspect[=[host:]port]#
Added in: v6.3.0
Activate inspector on host:port. Default is 127.0.0.1:9229.

V8 inspector integration allows tools such as Chrome DevTools and IDEs to debug and profile Node.js instances. The tools attach to Node.js instances via a tcp port and communicate using the Chrome DevTools Protocol.


Warning: binding inspector to a public IP:port combination is insecure#
Binding the inspector to a public IP (including 0.0.0.0) with an open port is insecure, as it allows external hosts to connect to the inspector and perform a remote code execution attack.

If specifying a host, make sure that either:

The host is not accessible from public networks.
A firewall disallows unwanted connections on the port.
More specifically, --inspect=0.0.0.0 is insecure if the port (9229 by default) is not firewall-protected.

See the debugging security implications section for more information.

--loader=file#
Added in: v9.0.0
Specify the file of the custom experimental ECMAScript Module loader.

--max-http-header-size=size#
Added in: v11.6.0
Specify the maximum size, in bytes, of HTTP headers. Defaults to 8KB.

--napi-modules#
Added in: v7.10.0
This option is a no-op. It is kept for compatibility.

--no-deprecation#
Added in: v0.8.0
Silence deprecation warnings.

--no-force-async-hooks-checks#
Added in: v9.0.0
Disables runtime checks for async_hooks. These will still be enabled dynamically when async_hooks is enabled.

--no-warnings#
Added in: v6.0.0
Silence all process warnings (including deprecations).

--openssl-config=file#
Added in: v6.9.0
Load an OpenSSL configuration file on startup. Among other uses, this can be used to enable FIPS-compliant crypto if Node.js is built with ./configure --openssl-fips.

--pending-deprecation#
Added in: v8.0.0
Emit pending deprecation warnings.

Pending deprecations are generally identical to a runtime deprecation with the notable exception that they are turned off by default and will not be emitted unless either the --pending-deprecation command line flag, or the NODE_PENDING_DEPRECATION=1 environment variable, is set. Pending deprecations are used to provide a kind of selective "early warning" mechanism that developers may leverage to detect deprecated API usage.

--preserve-symlinks#
Added in: v6.3.0
Instructs the module loader to preserve symbolic links when resolving and caching modules.

By default, when Node.js loads a module from a path that is symbolically linked to a different on-disk location, Node.js will dereference the link and use the actual on-disk "real path" of the module as both an identifier and as a root path to locate other dependency modules. In most cases, this default behavior is acceptable. However, when using symbolically linked peer dependencies, as illustrated in the example below, the default behavior causes an exception to be thrown if moduleA attempts to require moduleB as a peer dependency:

{appDir}
 ├── app
 │   ├── index.js
 │   └── node_modules
 │       ├── moduleA -> {appDir}/moduleA
 │       └── moduleB
 │           ├── index.js
 │           └── package.json
 └── moduleA
     ├── index.js
     └── package.json
The --preserve-symlinks command line flag instructs Node.js to use the symlink path for modules as opposed to the real path, allowing symbolically linked peer dependencies to be found.

Note, however, that using --preserve-symlinks can have other side effects. Specifically, symbolically linked native modules can fail to load if those are linked from more than one location in the dependency tree (Node.js would see those as two separate modules and would attempt to load the module multiple times, causing an exception to be thrown).

The --preserve-symlinks flag does not apply to the main module, which allows node --preserve-symlinks node_module/.bin/<foo> to work. To apply the same behavior for the main module, also use --preserve-symlinks-main.

--preserve-symlinks-main#
Added in: v10.2.0
Instructs the module loader to preserve symbolic links when resolving and caching the main module (require.main).

This flag exists so that the main module can be opted-in to the same behavior that --preserve-symlinks gives to all other imports; they are separate flags, however, for backward compatibility with older Node.js versions.

Note that --preserve-symlinks-main does not imply --preserve-symlinks; it is expected that --preserve-symlinks-main will be used in addition to --preserve-symlinks when it is not desirable to follow symlinks before resolving relative paths.

See --preserve-symlinks for more information.

--prof#
Added in: v2.0.0
Generate V8 profiler output.

--prof-process#
Added in: v5.2.0
Process V8 profiler output generated using the V8 option --prof.

--redirect-warnings=file#
Added in: v8.0.0
Write process warnings to the given file instead of printing to stderr. The file will be created if it does not exist, and will be appended to if it does. If an error occurs while attempting to write the warning to the file, the warning will be written to stderr instead.

--report-directory=directory#
History
Location at which the report will be generated.

--report-filename=filename#
History
Name of the file to which the report will be written.

--report-on-fatalerror#
History
Enables the report to be triggered on fatal errors (internal errors within the Node.js runtime such as out of memory) that lead to termination of the application, if --experimental-report is enabled. Useful to inspect various diagnostic data elements such as heap, stack, event loop state, resource consumption etc. to reason about the fatal error.

--report-on-signal#
History
Enables report to be generated upon receiving the specified (or predefined) signal to the running Node.js process, if --experimental-report is enabled. The signal to trigger the report is specified through --report-signal.

--report-signal=signal#
History
Sets or resets the signal for report generation (not supported on Windows). Default signal is SIGUSR2.

--report-uncaught-exception#
History
Enables report to be generated on un-caught exceptions, if --experimental-report is enabled. Useful when inspecting JavaScript stack in conjunction with native stack and other runtime environment data.

--throw-deprecation#
Added in: v0.11.14
Throw errors for deprecations.

--title=title#
Added in: v10.7.0
Set process.title on startup.

--tls-cipher-list=list#
Added in: v4.0.0
Specify an alternative default TLS cipher list. Requires Node.js to be built with crypto support (default).

--tls-max-v1.2#
Added in: v12.0.0
Set tls.DEFAULT_MAX_VERSION to 'TLSv1.2'. Use to disable support for TLSv1.3.

--tls-max-v1.3#
Added in: v12.0.0
Set default tls.DEFAULT_MAX_VERSION to 'TLSv1.3'. Use to enable support for TLSv1.3.

--tls-min-v1.0#
Added in: v12.0.0
Set default tls.DEFAULT_MIN_VERSION to 'TLSv1'. Use for compatibility with old TLS clients or servers.

--tls-min-v1.1#
Added in: v12.0.0
Set default tls.DEFAULT_MIN_VERSION to 'TLSv1.1'. Use for compatibility with old TLS clients or servers.

--tls-min-v1.3#
Added in: v12.0.0
Set default tls.DEFAULT_MIN_VERSION to 'TLSv1.3'. Use to disable support for TLSv1.2, which is not as secure as TLSv1.3.

--trace-deprecation#
Added in: v0.8.0
Print stack traces for deprecations.

--trace-event-categories#
Added in: v7.7.0
A comma separated list of categories that should be traced when trace event tracing is enabled using --trace-events-enabled.

--trace-event-file-pattern#
Added in: v9.8.0
Template string specifying the filepath for the trace event data, it supports ${rotation} and ${pid}.

--trace-events-enabled#
Added in: v7.7.0
Enables the collection of trace event tracing information.

--trace-sync-io#
Added in: v2.1.0
Prints a stack trace whenever synchronous I/O is detected after the first turn of the event loop.

--trace-warnings#
Added in: v6.0.0
Print stack traces for process warnings (including deprecations).

--track-heap-objects#
Added in: v2.4.0
Track heap object allocations for heap snapshots.

--unhandled-rejections=mode#
Added in: v12.0.0
By default all unhandled rejections trigger a warning plus a deprecation warning for the very first unhandled rejection in case no unhandledRejection hook is used.

Using this flag allows to change what should happen when an unhandled rejection occurs. One of three modes can be chosen:

strict: Raise the unhandled rejection as an uncaught exception.
warn: Always trigger a warning, no matter if the unhandledRejection hook is set or not but do not print the deprecation warning.
none: Silence all warnings.
--use-bundled-ca, --use-openssl-ca#
Added in: v6.11.0
Use bundled Mozilla CA store as supplied by current Node.js version or use OpenSSL's default CA store. The default store is selectable at build-time.

The bundled CA store, as supplied by Node.js, is a snapshot of Mozilla CA store that is fixed at release time. It is identical on all supported platforms.

Using OpenSSL store allows for external modifications of the store. For most Linux and BSD distributions, this store is maintained by the distribution maintainers and system administrators. OpenSSL CA store location is dependent on configuration of the OpenSSL library but this can be altered at runtime using environment variables.

See SSL_CERT_DIR and SSL_CERT_FILE.

--v8-options#
Added in: v0.1.3
Print V8 command line options.

--v8-pool-size=num#
Added in: v5.10.0
Set V8's thread pool size which will be used to allocate background jobs.

If set to 0 then V8 will choose an appropriate size of the thread pool based on the number of online processors.

If the value provided is larger than V8's maximum, then the largest value will be chosen.

--zero-fill-buffers#
Added in: v6.0.0
Automatically zero-fills all newly allocated Buffer and SlowBuffer instances.

-c, --check#
History
Syntax check the script without executing.

-e, --eval "script"#
History
Evaluate the following argument as JavaScript. The modules which are predefined in the REPL can also be used in script.

On Windows, using cmd.exe a single quote will not work correctly because it only recognizes double " for quoting. In Powershell or Git bash, both ' and " are usable.

-h, --help#
Added in: v0.1.3
Print node command line options. The output of this option is less detailed than this document.

-i, --interactive#
Added in: v0.7.7
Opens the REPL even if stdin does not appear to be a terminal.

-p, --print "script"#
History
Identical to -e but prints the result.

-r, --require module#
Added in: v1.6.0
Preload the specified module at startup.

Follows require()'s module resolution rules. module may be either a path to a file, or a node module name.

-v, --version#
Added in: v0.1.3
Print node's version.

Environment Variables#
NODE_DEBUG=module[,…]#
Added in: v0.1.32
','-separated list of core modules that should print debug information.

NODE_DEBUG_NATIVE=module[,…]#
','-separated list of core C++ modules that should print debug information.

NODE_DISABLE_COLORS=1#
Added in: v0.3.0
When set, colors will not be used in the REPL.

NODE_EXTRA_CA_CERTS=file#
Added in: v7.3.0
When set, the well known "root" CAs (like VeriSign) will be extended with the extra certificates in file. The file should consist of one or more trusted certificates in PEM format. A message will be emitted (once) with process.emitWarning() if the file is missing or malformed, but any errors are otherwise ignored.

Note that neither the well known nor extra certificates are used when the ca options property is explicitly specified for a TLS or HTTPS client or server.

This environment variable is ignored when node runs as setuid root or has Linux file capabilities set.

NODE_ICU_DATA=file#
Added in: v0.11.15
Data path for ICU (Intl object) data. Will extend linked-in data when compiled with small-icu support.

NODE_NO_WARNINGS=1#
Added in: v6.11.0
When set to 1, process warnings are silenced.

NODE_OPTIONS=options...#
Added in: v8.0.0
A space-separated list of command line options. options... are interpreted as if they had been specified on the command line before the actual command line (so they can be overridden). Node.js will exit with an error if an option that is not allowed in the environment is used, such as -p or a script file.

In case an option value happens to contain a space (for example a path listed in --require), it must be escaped using double quotes. For example:

--require "./my path/file.js"
Node.js options that are allowed are:

--report-directory
--report-filename
--report-on-fatalerror
--report-on-signal
--report-signal
--report-uncaught-exception
--enable-fips
--experimental-modules
--experimental-repl-await
--experimental-report
--experimental-vm-modules
--force-fips
--frozen-intrinsics
--heapsnapshot-signal
--icu-data-dir
--inspect
--inspect-brk
--inspect-port
--loader
--max-http-header-size
--napi-modules
--no-deprecation
--no-force-async-hooks-checks
--no-warnings
--openssl-config
--pending-deprecation
--redirect-warnings
--require, -r
--throw-deprecation
--title
--tls-cipher-list
--trace-deprecation
--trace-event-categories
--trace-event-file-pattern
--trace-events-enabled
--trace-sync-io
--trace-warnings
--track-heap-objects
--unhandled-rejections
--use-bundled-ca
--use-openssl-ca
--v8-pool-size
--zero-fill-buffers
V8 options that are allowed are:

--abort-on-uncaught-exception
--max-old-space-size
--perf-basic-prof
--perf-basic-prof-only-functions
--perf-prof
--perf-prof-unwinding-info
--stack-trace-limit
NODE_PATH=path[:…]#
Added in: v0.1.32
':'-separated list of directories prefixed to the module search path.

On Windows, this is a ';'-separated list instead.

NODE_PENDING_DEPRECATION=1#
Added in: v8.0.0
When set to 1, emit pending deprecation warnings.

Pending deprecations are generally identical to a runtime deprecation with the notable exception that they are turned off by default and will not be emitted unless either the --pending-deprecation command line flag, or the NODE_PENDING_DEPRECATION=1 environment variable, is set. Pending deprecations are used to provide a kind of selective "early warning" mechanism that developers may leverage to detect deprecated API usage.

NODE_PENDING_PIPE_INSTANCES=instances#
Set the number of pending pipe instance handles when the pipe server is waiting for connections. This setting applies to Windows only.

NODE_PRESERVE_SYMLINKS=1#
Added in: v7.1.0
When set to 1, instructs the module loader to preserve symbolic links when resolving and caching modules.

NODE_REDIRECT_WARNINGS=file#
Added in: v8.0.0
When set, process warnings will be emitted to the given file instead of printing to stderr. The file will be created if it does not exist, and will be appended to if it does. If an error occurs while attempting to write the warning to the file, the warning will be written to stderr instead. This is equivalent to using the --redirect-warnings=file command-line flag.

NODE_REPL_HISTORY=file#
Added in: v3.0.0
Path to the file used to store the persistent REPL history. The default path is ~/.node_repl_history, which is overridden by this variable. Setting the value to an empty string ('' or ' ') disables persistent REPL history.

NODE_TLS_REJECT_UNAUTHORIZED=value#
If value equals '0', certificate validation is disabled for TLS connections. This makes TLS, and HTTPS by extension, insecure. The use of this environment variable is strongly discouraged.

NODE_V8_COVERAGE=dir#
When set, Node.js will begin outputting V8 JavaScript code coverage to the directory provided as an argument. Coverage is output as an array of ScriptCoverage objects:

{
  "result": [
    {
      "scriptId": "67",
      "url": "internal/tty.js",
      "functions": []
    }
  ]
}
NODE_V8_COVERAGE will automatically propagate to subprocesses, making it easier to instrument applications that call the child_process.spawn() family of functions. NODE_V8_COVERAGE can be set to an empty string, to prevent propagation.

At this time coverage is only collected in the main thread and will not be output for code executed by worker threads.

OPENSSL_CONF=file#
Added in: v6.11.0
Load an OpenSSL configuration file on startup. Among other uses, this can be used to enable FIPS-compliant crypto if Node.js is built with ./configure --openssl-fips.

If the --openssl-config command line option is used, the environment variable is ignored.

SSL_CERT_DIR=dir#
Added in: v7.7.0
If --use-openssl-ca is enabled, this overrides and sets OpenSSL's directory containing trusted certificates.

Be aware that unless the child environment is explicitly set, this environment variable will be inherited by any child processes, and if they use OpenSSL, it may cause them to trust the same CAs as node.

SSL_CERT_FILE=file#
Added in: v7.7.0
If --use-openssl-ca is enabled, this overrides and sets OpenSSL's file containing trusted certificates.

Be aware that unless the child environment is explicitly set, this environment variable will be inherited by any child processes, and if they use OpenSSL, it may cause them to trust the same CAs as node.

UV_THREADPOOL_SIZE=size#
Set the number of threads used in libuv's threadpool to size threads.

Asynchronous system APIs are used by Node.js whenever possible, but where they do not exist, libuv's threadpool is used to create asynchronous node APIs based on synchronous system APIs. Node.js APIs that use the threadpool are:

all fs APIs, other than the file watcher APIs and those that are explicitly synchronous
crypto.pbkdf2()
crypto.randomBytes(), unless it is used without a callback
crypto.randomFill()
dns.lookup()
all zlib APIs, other than those that are explicitly synchronous
Because libuv's threadpool has a fixed size, it means that if for whatever reason any of these APIs takes a long time, other (seemingly unrelated) APIs that run in libuv's threadpool will experience degraded performance. In order to mitigate this issue, one potential solution is to increase the size of libuv's threadpool by setting the 'UV_THREADPOOL_SIZE' environment variable to a value greater than 4 (its current default value). For more information, see the libuv threadpool documentation.
